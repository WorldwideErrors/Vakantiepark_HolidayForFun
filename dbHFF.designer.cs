#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace HolidayForFun
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="dbHolidayForFun")]
	public partial class dbHFFDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void Insertcottage(cottage instance);
    partial void Updatecottage(cottage instance);
    partial void Deletecottage(cottage instance);
    partial void Insertreservation(reservation instance);
    partial void Updatereservation(reservation instance);
    partial void Deletereservation(reservation instance);
    partial void Insertcottagesinreservation(cottagesinreservation instance);
    partial void Updatecottagesinreservation(cottagesinreservation instance);
    partial void Deletecottagesinreservation(cottagesinreservation instance);
    partial void Insertcottagesize(cottagesize instance);
    partial void Updatecottagesize(cottagesize instance);
    partial void Deletecottagesize(cottagesize instance);
    partial void Insertcottagetype(cottagetype instance);
    partial void Updatecottagetype(cottagetype instance);
    partial void Deletecottagetype(cottagetype instance);
    partial void Insertcustomer(customer instance);
    partial void Updatecustomer(customer instance);
    partial void Deletecustomer(customer instance);
    partial void Insertpricehistory(pricehistory instance);
    partial void Updatepricehistory(pricehistory instance);
    partial void Deletepricehistory(pricehistory instance);
    #endregion
		
		public dbHFFDataContext() : 
				base(global::HolidayForFun.Properties.Settings.Default.dbHolidayForFunConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public dbHFFDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public dbHFFDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public dbHFFDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public dbHFFDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<cottage> cottages
		{
			get
			{
				return this.GetTable<cottage>();
			}
		}
		
		public System.Data.Linq.Table<reservation> reservations
		{
			get
			{
				return this.GetTable<reservation>();
			}
		}
		
		public System.Data.Linq.Table<cottagesinreservation> cottagesinreservations
		{
			get
			{
				return this.GetTable<cottagesinreservation>();
			}
		}
		
		public System.Data.Linq.Table<cottagesize> cottagesizes
		{
			get
			{
				return this.GetTable<cottagesize>();
			}
		}
		
		public System.Data.Linq.Table<cottagetype> cottagetypes
		{
			get
			{
				return this.GetTable<cottagetype>();
			}
		}
		
		public System.Data.Linq.Table<customer> customers
		{
			get
			{
				return this.GetTable<customer>();
			}
		}
		
		public System.Data.Linq.Table<pricehistory> pricehistories
		{
			get
			{
				return this.GetTable<pricehistory>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.cottages")]
	public partial class cottage : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _id;
		
		private string _house_number;
		
		private int _typeId;
		
		private int _sizeId;
		
		private EntitySet<cottagesinreservation> _cottagesinreservations;
		
		private EntitySet<pricehistory> _pricehistories;
		
		private EntityRef<cottagesize> _cottagesize;
		
		private EntityRef<cottagetype> _cottagetype;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidChanging(int value);
    partial void OnidChanged();
    partial void Onhouse_numberChanging(string value);
    partial void Onhouse_numberChanged();
    partial void OntypeIdChanging(int value);
    partial void OntypeIdChanged();
    partial void OnsizeIdChanging(int value);
    partial void OnsizeIdChanged();
    #endregion
		
		public cottage()
		{
			this._cottagesinreservations = new EntitySet<cottagesinreservation>(new Action<cottagesinreservation>(this.attach_cottagesinreservations), new Action<cottagesinreservation>(this.detach_cottagesinreservations));
			this._pricehistories = new EntitySet<pricehistory>(new Action<pricehistory>(this.attach_pricehistories), new Action<pricehistory>(this.detach_pricehistories));
			this._cottagesize = default(EntityRef<cottagesize>);
			this._cottagetype = default(EntityRef<cottagetype>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int id
		{
			get
			{
				return this._id;
			}
			set
			{
				if ((this._id != value))
				{
					this.OnidChanging(value);
					this.SendPropertyChanging();
					this._id = value;
					this.SendPropertyChanged("id");
					this.OnidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_house_number", DbType="VarChar(10) NOT NULL", CanBeNull=false)]
		public string house_number
		{
			get
			{
				return this._house_number;
			}
			set
			{
				if ((this._house_number != value))
				{
					this.Onhouse_numberChanging(value);
					this.SendPropertyChanging();
					this._house_number = value;
					this.SendPropertyChanged("house_number");
					this.Onhouse_numberChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_typeId", DbType="Int NOT NULL")]
		public int typeId
		{
			get
			{
				return this._typeId;
			}
			set
			{
				if ((this._typeId != value))
				{
					if (this._cottagetype.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OntypeIdChanging(value);
					this.SendPropertyChanging();
					this._typeId = value;
					this.SendPropertyChanged("typeId");
					this.OntypeIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_sizeId", DbType="Int NOT NULL")]
		public int sizeId
		{
			get
			{
				return this._sizeId;
			}
			set
			{
				if ((this._sizeId != value))
				{
					if (this._cottagesize.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnsizeIdChanging(value);
					this.SendPropertyChanging();
					this._sizeId = value;
					this.SendPropertyChanged("sizeId");
					this.OnsizeIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="cottage_cottagesinreservation", Storage="_cottagesinreservations", ThisKey="id", OtherKey="cottageId")]
		public EntitySet<cottagesinreservation> cottagesinreservations
		{
			get
			{
				return this._cottagesinreservations;
			}
			set
			{
				this._cottagesinreservations.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="cottage_pricehistory", Storage="_pricehistories", ThisKey="id", OtherKey="cottageId")]
		public EntitySet<pricehistory> pricehistories
		{
			get
			{
				return this._pricehistories;
			}
			set
			{
				this._pricehistories.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="cottagesize_cottage", Storage="_cottagesize", ThisKey="sizeId", OtherKey="id", IsForeignKey=true)]
		public cottagesize cottagesize
		{
			get
			{
				return this._cottagesize.Entity;
			}
			set
			{
				cottagesize previousValue = this._cottagesize.Entity;
				if (((previousValue != value) 
							|| (this._cottagesize.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._cottagesize.Entity = null;
						previousValue.cottages.Remove(this);
					}
					this._cottagesize.Entity = value;
					if ((value != null))
					{
						value.cottages.Add(this);
						this._sizeId = value.id;
					}
					else
					{
						this._sizeId = default(int);
					}
					this.SendPropertyChanged("cottagesize");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="cottagetype_cottage", Storage="_cottagetype", ThisKey="typeId", OtherKey="id", IsForeignKey=true)]
		public cottagetype cottagetype
		{
			get
			{
				return this._cottagetype.Entity;
			}
			set
			{
				cottagetype previousValue = this._cottagetype.Entity;
				if (((previousValue != value) 
							|| (this._cottagetype.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._cottagetype.Entity = null;
						previousValue.cottages.Remove(this);
					}
					this._cottagetype.Entity = value;
					if ((value != null))
					{
						value.cottages.Add(this);
						this._typeId = value.id;
					}
					else
					{
						this._typeId = default(int);
					}
					this.SendPropertyChanged("cottagetype");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_cottagesinreservations(cottagesinreservation entity)
		{
			this.SendPropertyChanging();
			entity.cottage = this;
		}
		
		private void detach_cottagesinreservations(cottagesinreservation entity)
		{
			this.SendPropertyChanging();
			entity.cottage = null;
		}
		
		private void attach_pricehistories(pricehistory entity)
		{
			this.SendPropertyChanging();
			entity.cottage = this;
		}
		
		private void detach_pricehistories(pricehistory entity)
		{
			this.SendPropertyChanging();
			entity.cottage = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.reservations")]
	public partial class reservation : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _id;
		
		private System.DateTime _startdate;
		
		private System.DateTime _enddate;
		
		private int _customerId;
		
		private EntitySet<cottagesinreservation> _cottagesinreservations;
		
		private EntityRef<customer> _customer;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidChanging(int value);
    partial void OnidChanged();
    partial void OnstartdateChanging(System.DateTime value);
    partial void OnstartdateChanged();
    partial void OnenddateChanging(System.DateTime value);
    partial void OnenddateChanged();
    partial void OncustomerIdChanging(int value);
    partial void OncustomerIdChanged();
    #endregion
		
		public reservation()
		{
			this._cottagesinreservations = new EntitySet<cottagesinreservation>(new Action<cottagesinreservation>(this.attach_cottagesinreservations), new Action<cottagesinreservation>(this.detach_cottagesinreservations));
			this._customer = default(EntityRef<customer>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int id
		{
			get
			{
				return this._id;
			}
			set
			{
				if ((this._id != value))
				{
					this.OnidChanging(value);
					this.SendPropertyChanging();
					this._id = value;
					this.SendPropertyChanged("id");
					this.OnidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_startdate", DbType="Date NOT NULL")]
		public System.DateTime startdate
		{
			get
			{
				return this._startdate;
			}
			set
			{
				if ((this._startdate != value))
				{
					this.OnstartdateChanging(value);
					this.SendPropertyChanging();
					this._startdate = value;
					this.SendPropertyChanged("startdate");
					this.OnstartdateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_enddate", DbType="Date NOT NULL")]
		public System.DateTime enddate
		{
			get
			{
				return this._enddate;
			}
			set
			{
				if ((this._enddate != value))
				{
					this.OnenddateChanging(value);
					this.SendPropertyChanging();
					this._enddate = value;
					this.SendPropertyChanged("enddate");
					this.OnenddateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_customerId", DbType="Int NOT NULL")]
		public int customerId
		{
			get
			{
				return this._customerId;
			}
			set
			{
				if ((this._customerId != value))
				{
					if (this._customer.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OncustomerIdChanging(value);
					this.SendPropertyChanging();
					this._customerId = value;
					this.SendPropertyChanged("customerId");
					this.OncustomerIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="reservation_cottagesinreservation", Storage="_cottagesinreservations", ThisKey="id", OtherKey="reservationId")]
		public EntitySet<cottagesinreservation> cottagesinreservations
		{
			get
			{
				return this._cottagesinreservations;
			}
			set
			{
				this._cottagesinreservations.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="customer_reservation", Storage="_customer", ThisKey="customerId", OtherKey="id", IsForeignKey=true)]
		public customer customer
		{
			get
			{
				return this._customer.Entity;
			}
			set
			{
				customer previousValue = this._customer.Entity;
				if (((previousValue != value) 
							|| (this._customer.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._customer.Entity = null;
						previousValue.reservations.Remove(this);
					}
					this._customer.Entity = value;
					if ((value != null))
					{
						value.reservations.Add(this);
						this._customerId = value.id;
					}
					else
					{
						this._customerId = default(int);
					}
					this.SendPropertyChanged("customer");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_cottagesinreservations(cottagesinreservation entity)
		{
			this.SendPropertyChanging();
			entity.reservation = this;
		}
		
		private void detach_cottagesinreservations(cottagesinreservation entity)
		{
			this.SendPropertyChanging();
			entity.reservation = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.cottagesinreservation")]
	public partial class cottagesinreservation : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _id;
		
		private int _amount;
		
		private int _cottageId;
		
		private int _reservationId;
		
		private EntityRef<cottage> _cottage;
		
		private EntityRef<reservation> _reservation;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidChanging(int value);
    partial void OnidChanged();
    partial void OnamountChanging(int value);
    partial void OnamountChanged();
    partial void OncottageIdChanging(int value);
    partial void OncottageIdChanged();
    partial void OnreservationIdChanging(int value);
    partial void OnreservationIdChanged();
    #endregion
		
		public cottagesinreservation()
		{
			this._cottage = default(EntityRef<cottage>);
			this._reservation = default(EntityRef<reservation>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int id
		{
			get
			{
				return this._id;
			}
			set
			{
				if ((this._id != value))
				{
					this.OnidChanging(value);
					this.SendPropertyChanging();
					this._id = value;
					this.SendPropertyChanged("id");
					this.OnidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_amount", DbType="Int NOT NULL")]
		public int amount
		{
			get
			{
				return this._amount;
			}
			set
			{
				if ((this._amount != value))
				{
					this.OnamountChanging(value);
					this.SendPropertyChanging();
					this._amount = value;
					this.SendPropertyChanged("amount");
					this.OnamountChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_cottageId", DbType="Int NOT NULL")]
		public int cottageId
		{
			get
			{
				return this._cottageId;
			}
			set
			{
				if ((this._cottageId != value))
				{
					if (this._cottage.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OncottageIdChanging(value);
					this.SendPropertyChanging();
					this._cottageId = value;
					this.SendPropertyChanged("cottageId");
					this.OncottageIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_reservationId", DbType="Int NOT NULL")]
		public int reservationId
		{
			get
			{
				return this._reservationId;
			}
			set
			{
				if ((this._reservationId != value))
				{
					if (this._reservation.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnreservationIdChanging(value);
					this.SendPropertyChanging();
					this._reservationId = value;
					this.SendPropertyChanged("reservationId");
					this.OnreservationIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="cottage_cottagesinreservation", Storage="_cottage", ThisKey="cottageId", OtherKey="id", IsForeignKey=true)]
		public cottage cottage
		{
			get
			{
				return this._cottage.Entity;
			}
			set
			{
				cottage previousValue = this._cottage.Entity;
				if (((previousValue != value) 
							|| (this._cottage.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._cottage.Entity = null;
						previousValue.cottagesinreservations.Remove(this);
					}
					this._cottage.Entity = value;
					if ((value != null))
					{
						value.cottagesinreservations.Add(this);
						this._cottageId = value.id;
					}
					else
					{
						this._cottageId = default(int);
					}
					this.SendPropertyChanged("cottage");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="reservation_cottagesinreservation", Storage="_reservation", ThisKey="reservationId", OtherKey="id", IsForeignKey=true)]
		public reservation reservation
		{
			get
			{
				return this._reservation.Entity;
			}
			set
			{
				reservation previousValue = this._reservation.Entity;
				if (((previousValue != value) 
							|| (this._reservation.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._reservation.Entity = null;
						previousValue.cottagesinreservations.Remove(this);
					}
					this._reservation.Entity = value;
					if ((value != null))
					{
						value.cottagesinreservations.Add(this);
						this._reservationId = value.id;
					}
					else
					{
						this._reservationId = default(int);
					}
					this.SendPropertyChanged("reservation");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.cottagesizes")]
	public partial class cottagesize : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _id;
		
		private string _name;
		
		private int _size;
		
		private EntitySet<cottage> _cottages;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidChanging(int value);
    partial void OnidChanged();
    partial void OnnameChanging(string value);
    partial void OnnameChanged();
    partial void OnsizeChanging(int value);
    partial void OnsizeChanged();
    #endregion
		
		public cottagesize()
		{
			this._cottages = new EntitySet<cottage>(new Action<cottage>(this.attach_cottages), new Action<cottage>(this.detach_cottages));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int id
		{
			get
			{
				return this._id;
			}
			set
			{
				if ((this._id != value))
				{
					this.OnidChanging(value);
					this.SendPropertyChanging();
					this._id = value;
					this.SendPropertyChanged("id");
					this.OnidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_name", DbType="VarChar(15) NOT NULL", CanBeNull=false)]
		public string name
		{
			get
			{
				return this._name;
			}
			set
			{
				if ((this._name != value))
				{
					this.OnnameChanging(value);
					this.SendPropertyChanging();
					this._name = value;
					this.SendPropertyChanged("name");
					this.OnnameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_size", DbType="Int NOT NULL")]
		public int size
		{
			get
			{
				return this._size;
			}
			set
			{
				if ((this._size != value))
				{
					this.OnsizeChanging(value);
					this.SendPropertyChanging();
					this._size = value;
					this.SendPropertyChanged("size");
					this.OnsizeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="cottagesize_cottage", Storage="_cottages", ThisKey="id", OtherKey="sizeId")]
		public EntitySet<cottage> cottages
		{
			get
			{
				return this._cottages;
			}
			set
			{
				this._cottages.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_cottages(cottage entity)
		{
			this.SendPropertyChanging();
			entity.cottagesize = this;
		}
		
		private void detach_cottages(cottage entity)
		{
			this.SendPropertyChanging();
			entity.cottagesize = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.cottagetypes")]
	public partial class cottagetype : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _id;
		
		private string _name;
		
		private EntitySet<cottage> _cottages;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidChanging(int value);
    partial void OnidChanged();
    partial void OnnameChanging(string value);
    partial void OnnameChanged();
    #endregion
		
		public cottagetype()
		{
			this._cottages = new EntitySet<cottage>(new Action<cottage>(this.attach_cottages), new Action<cottage>(this.detach_cottages));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int id
		{
			get
			{
				return this._id;
			}
			set
			{
				if ((this._id != value))
				{
					this.OnidChanging(value);
					this.SendPropertyChanging();
					this._id = value;
					this.SendPropertyChanged("id");
					this.OnidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_name", DbType="VarChar(15) NOT NULL", CanBeNull=false)]
		public string name
		{
			get
			{
				return this._name;
			}
			set
			{
				if ((this._name != value))
				{
					this.OnnameChanging(value);
					this.SendPropertyChanging();
					this._name = value;
					this.SendPropertyChanged("name");
					this.OnnameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="cottagetype_cottage", Storage="_cottages", ThisKey="id", OtherKey="typeId")]
		public EntitySet<cottage> cottages
		{
			get
			{
				return this._cottages;
			}
			set
			{
				this._cottages.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_cottages(cottage entity)
		{
			this.SendPropertyChanging();
			entity.cottagetype = this;
		}
		
		private void detach_cottages(cottage entity)
		{
			this.SendPropertyChanging();
			entity.cottagetype = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.customers")]
	public partial class customer : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _id;
		
		private string _firstname;
		
		private string _lastname;
		
		private string _adress;
		
		private string _city;
		
		private string _email;
		
		private string _phonenumber;
		
		private System.DateTime _birthday;
		
		private EntitySet<reservation> _reservations;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidChanging(int value);
    partial void OnidChanged();
    partial void OnfirstnameChanging(string value);
    partial void OnfirstnameChanged();
    partial void OnlastnameChanging(string value);
    partial void OnlastnameChanged();
    partial void OnadressChanging(string value);
    partial void OnadressChanged();
    partial void OncityChanging(string value);
    partial void OncityChanged();
    partial void OnemailChanging(string value);
    partial void OnemailChanged();
    partial void OnphonenumberChanging(string value);
    partial void OnphonenumberChanged();
    partial void OnbirthdayChanging(System.DateTime value);
    partial void OnbirthdayChanged();
    #endregion
		
		public customer()
		{
			this._reservations = new EntitySet<reservation>(new Action<reservation>(this.attach_reservations), new Action<reservation>(this.detach_reservations));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int id
		{
			get
			{
				return this._id;
			}
			set
			{
				if ((this._id != value))
				{
					this.OnidChanging(value);
					this.SendPropertyChanging();
					this._id = value;
					this.SendPropertyChanged("id");
					this.OnidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_firstname", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string firstname
		{
			get
			{
				return this._firstname;
			}
			set
			{
				if ((this._firstname != value))
				{
					this.OnfirstnameChanging(value);
					this.SendPropertyChanging();
					this._firstname = value;
					this.SendPropertyChanged("firstname");
					this.OnfirstnameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_lastname", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string lastname
		{
			get
			{
				return this._lastname;
			}
			set
			{
				if ((this._lastname != value))
				{
					this.OnlastnameChanging(value);
					this.SendPropertyChanging();
					this._lastname = value;
					this.SendPropertyChanged("lastname");
					this.OnlastnameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_adress", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string adress
		{
			get
			{
				return this._adress;
			}
			set
			{
				if ((this._adress != value))
				{
					this.OnadressChanging(value);
					this.SendPropertyChanging();
					this._adress = value;
					this.SendPropertyChanged("adress");
					this.OnadressChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_city", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string city
		{
			get
			{
				return this._city;
			}
			set
			{
				if ((this._city != value))
				{
					this.OncityChanging(value);
					this.SendPropertyChanging();
					this._city = value;
					this.SendPropertyChanged("city");
					this.OncityChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_email", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string email
		{
			get
			{
				return this._email;
			}
			set
			{
				if ((this._email != value))
				{
					this.OnemailChanging(value);
					this.SendPropertyChanging();
					this._email = value;
					this.SendPropertyChanged("email");
					this.OnemailChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_phonenumber", DbType="VarChar(15)")]
		public string phonenumber
		{
			get
			{
				return this._phonenumber;
			}
			set
			{
				if ((this._phonenumber != value))
				{
					this.OnphonenumberChanging(value);
					this.SendPropertyChanging();
					this._phonenumber = value;
					this.SendPropertyChanged("phonenumber");
					this.OnphonenumberChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_birthday", DbType="Date NOT NULL")]
		public System.DateTime birthday
		{
			get
			{
				return this._birthday;
			}
			set
			{
				if ((this._birthday != value))
				{
					this.OnbirthdayChanging(value);
					this.SendPropertyChanging();
					this._birthday = value;
					this.SendPropertyChanged("birthday");
					this.OnbirthdayChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="customer_reservation", Storage="_reservations", ThisKey="id", OtherKey="customerId")]
		public EntitySet<reservation> reservations
		{
			get
			{
				return this._reservations;
			}
			set
			{
				this._reservations.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_reservations(reservation entity)
		{
			this.SendPropertyChanging();
			entity.customer = this;
		}
		
		private void detach_reservations(reservation entity)
		{
			this.SendPropertyChanging();
			entity.customer = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.pricehistories")]
	public partial class pricehistory : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _id;
		
		private System.DateTime _startdate;
		
		private System.Nullable<System.DateTime> _enddate;
		
		private decimal _price;
		
		private int _cottageId;
		
		private EntityRef<cottage> _cottage;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidChanging(int value);
    partial void OnidChanged();
    partial void OnstartdateChanging(System.DateTime value);
    partial void OnstartdateChanged();
    partial void OnenddateChanging(System.Nullable<System.DateTime> value);
    partial void OnenddateChanged();
    partial void OnpriceChanging(decimal value);
    partial void OnpriceChanged();
    partial void OncottageIdChanging(int value);
    partial void OncottageIdChanged();
    #endregion
		
		public pricehistory()
		{
			this._cottage = default(EntityRef<cottage>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int id
		{
			get
			{
				return this._id;
			}
			set
			{
				if ((this._id != value))
				{
					this.OnidChanging(value);
					this.SendPropertyChanging();
					this._id = value;
					this.SendPropertyChanged("id");
					this.OnidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_startdate", DbType="Date NOT NULL")]
		public System.DateTime startdate
		{
			get
			{
				return this._startdate;
			}
			set
			{
				if ((this._startdate != value))
				{
					this.OnstartdateChanging(value);
					this.SendPropertyChanging();
					this._startdate = value;
					this.SendPropertyChanged("startdate");
					this.OnstartdateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_enddate", DbType="Date")]
		public System.Nullable<System.DateTime> enddate
		{
			get
			{
				return this._enddate;
			}
			set
			{
				if ((this._enddate != value))
				{
					this.OnenddateChanging(value);
					this.SendPropertyChanging();
					this._enddate = value;
					this.SendPropertyChanged("enddate");
					this.OnenddateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_price", DbType="Money NOT NULL")]
		public decimal price
		{
			get
			{
				return this._price;
			}
			set
			{
				if ((this._price != value))
				{
					this.OnpriceChanging(value);
					this.SendPropertyChanging();
					this._price = value;
					this.SendPropertyChanged("price");
					this.OnpriceChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_cottageId", DbType="Int NOT NULL")]
		public int cottageId
		{
			get
			{
				return this._cottageId;
			}
			set
			{
				if ((this._cottageId != value))
				{
					if (this._cottage.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OncottageIdChanging(value);
					this.SendPropertyChanging();
					this._cottageId = value;
					this.SendPropertyChanged("cottageId");
					this.OncottageIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="cottage_pricehistory", Storage="_cottage", ThisKey="cottageId", OtherKey="id", IsForeignKey=true)]
		public cottage cottage
		{
			get
			{
				return this._cottage.Entity;
			}
			set
			{
				cottage previousValue = this._cottage.Entity;
				if (((previousValue != value) 
							|| (this._cottage.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._cottage.Entity = null;
						previousValue.pricehistories.Remove(this);
					}
					this._cottage.Entity = value;
					if ((value != null))
					{
						value.pricehistories.Add(this);
						this._cottageId = value.id;
					}
					else
					{
						this._cottageId = default(int);
					}
					this.SendPropertyChanged("cottage");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
}
#pragma warning restore 1591
